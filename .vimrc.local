:set t_Co=256

if exists("g:ctrl_user_command")
  unlet g:ctrlp_user_command
endif
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/*,*/.git/*,*/db/migrate*,*/old_migrations*,*/fixtures*,'*/log/*,*/node_modules*
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\vendor$|\migrate$|\old_migrations$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
let g:ctrlp_regexp = 1
let g:ctrlp_max_files=0

"misc other
nmap <F9> :set ignorecase! ignorecase?
set gdefault
nmap <F5> :setlocal spell! spelllang=en_us<CR>
set nospell


"jedi vim"
"autocmd FileType python setlocal completeopt-=preview

let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "Y"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#popup_on_dot = 0
let g:jedi#completions_enabled = 0

nmap U :join<CR>
nmap J <C-D>
nmap K <C-U>


let g:syntastic_python_flake8_args='--ignore=E501'

let g:molokai_original = 1

au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.markdown setlocal textwidth=80

"max charwidth indicator
let &colorcolumn=join(range(81,81),",")
highlight ColorColumn ctermbg=235
"guibg=#6600ff

let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ag_working_path_mode = 'r'

set noswapfile
set norelativenumber

"remap ,w to :w
nmap <leader>w <Esc>:w<Enter>
nmap <leader>a :Ack 

"resize window alias
nmap + <C-w>+
nmap - <C-w>-

" autowrite on buffer focus lost"
let g:airline_section_z = '%t'
let g:airline_section_c = ''

"autocmd bufwritepost .vimrc.local source $MYVIMRC

let g:ConqueTerm_CloseOnEnd = 1

hi Normal ctermbg=234 cterm=NONE
hi LineNr ctermfg=102 ctermbg=235
"au! FileType conque_term 
"au! CursorHoldI,CursorMovedI *ipdb*

set wrap
set linebreak
set nolist  " list disables linebreak
set textwidth=0
set wrapmargin=0

highlight Comment ctermfg=green

" Your vimrc
filetype plugin indent on
syntax enable

" Vim needs to be built with Python scripting support, and must be
" able to find Merlin's executable on PATH.
if executable('ocamlmerlin') && has('python')
  let s:ocamlmerlin = substitute(system('opam config var share'), '\n$', '', '''') . "/ocamlmerlin"
  execute "set rtp+=".s:ocamlmerlin."/vim"
  execute "set rtp+=".s:ocamlmerlin."/vimbufsync"
endif

" Your vimrc
autocmd FileType ocaml source substitute(system('opam config var share'), '\n$', '', '''') . "/typerex/ocp-indent/ocp-indent.vim"

nmap <silent> <leader>r :so $MYVIMRC<CR>
hi Visual ctermfg=NONE ctermbg=137

let test#python#runner = 'pytest'
let test#strategy = "dispatch"
nmap <silent> <leader>T :TestNearest --pdb<CR>
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>F :TestFile --pdb<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>S :TestSuite --pdb<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>G :TestVisit<CR>

map <leader>r :NERDTreeFind<cr>
